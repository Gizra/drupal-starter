<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\config_pages\Entity\ConfigPages;
use Drupal\media\IFrameMarkup;
use Drupal\node\NodeInterface;
use Drupal\server_general\ArabicNumberConverter;

/**
 * Implements hook_theme_suggestions_alter().
 *
 * Adds fine-grained overrides for form templates.
 *
 * For instance for a form with an ID "server_general_foo_form", you can use
 * form--server-general-foo-form.html.twig
 *
 * That can be based on form.html.twig.
 */
function server_general_theme_suggestions_alter(array &$suggestions, array $variables) {
  if (!isset($variables['element'])) {
    return $suggestions;
  }

  if (!is_array($variables['element'])) {
    return $suggestions;
  }

  if (!isset($variables['element']['#type']) || $variables['element']['#type'] !== 'form') {
    return $suggestions;
  }

  $original_theme_hook = $variables['theme_hook_original'];
  $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);

  return $suggestions;
}

/**
 * Implements hook_intl_date_formatted_date_alter().
 */
function server_general_intl_date_formatted_date_alter(string &$formatted_date, array $context) {
  switch ($context['langcode']) {
    case 'ar':
      // Change Arabic numbers to Latin numbers.
      $formatted_date = ArabicNumberConverter::arToEn($formatted_date);
      break;

    case 'ru':
      // Uppercase the text parts of the date in Russian.
      $formatted_date = mb_convert_case($formatted_date, MB_CASE_TITLE, 'UTF-8');
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Move selected language to the top of the Language drop down list.
 */
function server_general_form_lang_dropdown_form_alter(array &$form, FormStateInterface $form_state) {
  $selected_language = $form['lang_dropdown_select']['#default_value'];
  $selected_language_name = $form['lang_dropdown_select']['#options'][$selected_language];

  // Remove item.
  unset($form['lang_dropdown_select']['#options'][$selected_language]);

  // And re-add on top of the list.
  $form['lang_dropdown_select']['#options'] = [$selected_language => $selected_language_name] + $form['lang_dropdown_select']['#options'];
}

/**
 * Implements hook_field_info_alter().
 *
 * Set default widgets.
 */
function server_general_field_info_alter(array &$info) {
  // Select2 for entity reference.
  if (isset($info['entity_reference'])) {
    $info['entity_reference']['default_widget'] = 'select2_entity_reference';
  }
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 *
 * Language selection should be without the not defined and not applicable
 * options.
 *
 * @see \Drupal\Core\Field\Plugin\Field\FieldWidget\LanguageSelectWidget::formElement()
 */
function server_general_field_widget_single_element_language_select_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  $element['value']['#languages'] = LanguageInterface::STATE_CONFIGURABLE;
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 *
 * Unpublish option should not be available for moderation of locked nodes.
 */
function server_general_field_widget_single_element_moderation_state_default_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $entity */
  $entity = $form_object->getEntity();

  // Not a node, so return early.
  if (!$entity instanceof NodeInterface) {
    return;
  }

  /** @var \Drupal\server_general\LockedPages $locked_pages_service */
  $locked_pages_service = \Drupal::service('server_general.locked_pages');
  // The bundles that can be locked.
  $bundles = $locked_pages_service->getReferencedBundles();

  // Node is not locked or options do not include unpublished, return early.
  if (!in_array($entity->bundle(), $bundles) || !$locked_pages_service->isNodeLocked($entity) || !isset($element['state']['#options']['unpublished'])) {
    return;
  }

  unset($element['state']['#options']['unpublished']);

}

/**
 * Implements hook_entity_access().
 */
function server_general_node_access(NodeInterface $entity, string $op, AccountInterface $account) {
  /** @var \Drupal\server_general\LockedPages $locked_pages_service */
  $locked_pages_service = \Drupal::service('server_general.locked_pages');
  // The bundles that can be locked.
  $bundles = $locked_pages_service->getReferencedBundles();

  if (!in_array($entity->bundle(), $bundles)) {
    return AccessResult::neutral();
  }

  $main_settings = $locked_pages_service->getMainSettings();

  if ($op === 'delete' && $main_settings instanceof ConfigPages && $locked_pages_service->isNodeLocked($entity)) {
    // Add cache tags to the cache metadata.
    $cache_tags = $main_settings->getCacheTags();
    return AccessResult::forbidden()->addCacheableDependency($entity)->addCacheTags($cache_tags);
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_predelete().
 */
function server_general_node_predelete(NodeInterface $entity) {
  /** @var \Drupal\server_general\LockedPages $locked_pages_service */
  $locked_pages_service = \Drupal::service('server_general.locked_pages');

  if (!$locked_pages_service->isNodeLocked($entity)) {
    return;
  }

  throw new Exception("This node is locked and can't be removed");
}

/**
 * Implements hook_node_presave().
 */
function server_general_node_presave(NodeInterface $entity) {
  /** @var \Drupal\server_general\LockedPages $locked_pages_service */
  $locked_pages_service = \Drupal::service('server_general.locked_pages');

  if (!$locked_pages_service->isNodeLocked($entity)) {
    return;
  }

  // Get the module handler service.
  $module_handler = \Drupal::service('module_handler');
  if ($entity->isNew()) {
    return;
  }
  /** @var \Drupal\node\NodeInterface $original */
  $original = \Drupal::entityTypeManager()->getStorage('node')->loadUnchanged($entity->id());
  // If content moderation is used, don't allow unpublish for locked pages.
  if ($module_handler->moduleExists('content_moderation') && $original->get('moderation_state')->getString() === 'published' && $entity->get('moderation_state')->getString() === 'unpublished') {
    $entity->set('moderation_state', 'published');
  }

  if ($original->isPublished() && !$entity->isPublished()) {
    $entity->setPublished();
  }

  if ($entity->get('moderation_state')->value == 'unpublished') {
    $entity->set('moderation_state', $original->get('moderation_state')->value);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function server_general_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();

  // Check that form object is instance of ContentEntityFormInterface.
  if (!$form_object instanceof ContentEntityFormInterface) {
    return;
  }
  /** @var \Drupal\node\NodeInterface $entity */
  $entity = $form_object->getEntity();
  // Check that entity is a node.
  if ($entity->getEntityType()->id() !== 'node') {
    return;
  }

  // Check that we are on the node edit page.
  if ($form['#form_id'] !== "node_{$entity->bundle()}_edit_form") {
    return;
  }
  /** @var \Drupal\server_general\LockedPages $locked_pages_service */
  $locked_pages_service = \Drupal::service('server_general.locked_pages');

  // Do nothing if scheduler module is not installed and node is not locked.
  if (!\Drupal::moduleHandler()->moduleExists('scheduler') && !$locked_pages_service->isNodeLocked($entity)) {
    return;
  }

  $publish_on = $entity->hasField('publish_on') ? $entity->get('publish_on')->value : NULL;
  $unpublish_on = $entity->hasField('unpublish_on') ? $entity->get('unpublish_on')->value : NULL;
  // If node is locked and schedule dates are not set,
  // remove publish_on, unpublish_on and scheduler_settings.
  if (!$publish_on && !$unpublish_on && $locked_pages_service->isNodeLocked($entity)) {
    $scheduler_fields = ['publish_on', 'unpublish_on', 'scheduler_settings'];
    foreach (array_keys($form) as $key) {
      if (in_array($key, $scheduler_fields)) {
        unset($form[$key]);
      }
    }
  }

  $request_time = \Drupal::time()->getCurrentTime();
  // If schedule dates are set and node is locked,
  // make them readonly and disabled.
  if ((($publish_on > $request_time) || ($unpublish_on > $request_time)) && $locked_pages_service->isNodeLocked($entity)) {
    $form['scheduler_settings']['#description'] = [
      '#type' => 'inline_template',
      '#template' => '<strong class="action-link--danger">{{ message }}</strong>',
      '#context' => [
        'message' => t("This page is locked hence the publish and unpublish dates can not be changed. Also scheduling dates won't work."),
      ],
    ];
    $form['publish_on']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
    $form['publish_on']['widget'][0]['value']['#attributes']['disabled'] = TRUE;
    $form['unpublish_on']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
    $form['unpublish_on']['widget'][0]['value']['#attributes']['disabled'] = TRUE;
  }

  // Check if node is locked or not.
  if (!$locked_pages_service->isNodeLocked($entity)) {
    return;
  }

  unset($form['actions']['delete']);
  // Unset "Delete translation" button.
  // @See server_general_module_implements_alter().
  unset($form['actions']['delete_translation']);
  $form['status']['#access'] = FALSE;
}

/**
 * Implements hook_module_implements_alter().
 */
function server_general_module_implements_alter(array &$implementations, string $hook) {
  if ($hook == 'form_alter' && isset($implementations['server_general'])) {
    // Move this module's implementation of form_alter to the end of the list.
    // We're doing this so that we can override
    // "content_translation_form_alter()" in our hook_form_alter.
    $hook_init = $implementations['server_general'];
    unset($implementations['server_general']);
    $implementations['server_general'] = $hook_init;
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function server_general_entity_operation_alter(array &$operations, EntityInterface $entity) {
  // Check that entity is a node.
  if ($entity->getEntityType()->id() !== 'node') {
    return;
  }
  /** @var \Drupal\server_general\LockedPages $locked_pages_service */
  $locked_pages_service = \Drupal::service('server_general.locked_pages');

  // Check if node is locked or not.
  /** @var \Drupal\node\NodeInterface $entity */
  if (!$locked_pages_service->isNodeLocked($entity)) {
    return;
  }

  unset($operations['delete']);
}

/**
 * Implements hook_content_translation_overview_alter().
 */
function server_general_content_translation_overview_alter(array $build, EntityInterface $entity) {
  if (!$entity instanceof NodeInterface || $entity->bundle() !== 'landing_page') {
    // Not a Landing page.
    return;
  }
  /** @var \Drupal\server_general\LockedPages $locked_pages_service */
  $locked_pages_service = \Drupal::service('server_general.locked_pages');

  /** @var \Drupal\node\NodeInterface $entity */
  if (!$locked_pages_service->isNodeLocked($entity)) {
    // Node isn't locked.
    return;
  }
  if (!isset($build['content_translation_overview']['#rows'])) {
    // There's no content to translate.
    return;
  }
  $content_translation_overview_rows = &$build['content_translation_overview']['#rows'];
  // Check for each language and unset delete operation.
  // Delete operation will exist only if node translation exists for
  // given language.
  foreach ($content_translation_overview_rows as &$language_data) {
    foreach ($language_data as &$element) {
      // Check if the "delete" operation exists, then unset it.
      if (is_array($element) && isset($element['data']['#type']) && $element['data']['#type'] === 'operations' && isset($element['data']['#links']['delete'])) {
        unset($element['data']['#links']['delete']);
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function server_general_menu_local_tasks_alter(array &$data, string $route_name): void {
  if (!isset($data['tabs'][0]['entity.node.delete_form'])) {
    return;
  }

  $routes = [
    'entity.node.canonical',
    'entity.node.edit_form',
  ];

  if (!in_array($route_name, $routes)) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $entity */
  $entity = \Drupal::routeMatch()->getParameter('node');
  if (!$entity instanceof NodeInterface) {
    return;
  }

  /** @var \Drupal\server_general\LockedPages $locked_pages_service */
  $locked_pages_service = \Drupal::service('server_general.locked_pages');

  // Check if node is locked or not.
  /** @var \Drupal\node\NodeInterface $entity */
  if (!$locked_pages_service->isNodeLocked($entity)) {
    return;
  }

  unset($data['tabs'][0]['entity.node.delete_form']);
}

/**
 * Implements hook_preprocess_media_oembed_iframe().
 */
function server_general_preprocess_media_oembed_iframe(array &$variables) {
  // Turn on privacy-enhanced mode for youtube videos.
  // @see https://support.google.com/youtube/answer/171780
  if (strpos((string) $variables['media'], 'youtube.com') !== FALSE) {
    $variables['media'] = IFrameMarkup::create(str_replace('youtube.com/', 'youtube-nocookie.com/', $variables['media']));
  }
}

/**
 * Implements hook_scheduler_unpublishing_allowed().
 */
function server_general_scheduler_unpublishing_allowed(NodeInterface $entity) {
  // Do nothing if node is not a landing page.
  if ($entity->bundle() !== 'landing_page') {
    return;
  }

  /** @var \Drupal\server_general\LockedPages $locked_pages_service */
  $locked_pages_service = \Drupal::service('server_general.locked_pages');

  return !$locked_pages_service->isNodeLocked($entity);
}
