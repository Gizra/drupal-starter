<?php

/**
 * @file
 * Theme custom logic.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_theme().
 */
function server_theme_theme() {
  $info = [];

  $info['server_theme_tag'] = [
    'variables' => [
      'url' => NULL,
      'title' => NULL,
    ],
  ];

  // Simple card - Hero.
  $info['server_theme_card__hero'] = [
    'variables' => [
      'image' => NULL,
      'image_alt' => NULL,
      'title' => NULL,
      'url' => NULL,
      'body' => NULL,
      'author' => NULL,
      'date' => NULL,
    ],
  ];

  // Simple card.
  $info['server_theme_card__simple'] = [
    'variables' => [
      'image' => NULL,
      'image_alt' => NULL,
      'title' => NULL,
      'url' => NULL,
      'body' => NULL,
      // A list of links.
      'tags' => [],
      'author' => NULL,
    ],
  ];

  // Multiple cards.
  $info['server_theme_cards'] = [
    'variables' => [
      // Optional title.
      'title' => NULL,
      // A list of the view's row items.
      // - attributes: The row's HTML attributes.
      // - content: The row's content.
      // This is copied from Views, so we could easily have Views list wired to
      // this theme.
      'rows' => [],
    ],
  ];

  // Content tags.
  $info['server_theme_content__tags'] = [
    'variables' => [
      // A list of links.
      'tags' => [],
    ],
  ];

  $info['server_theme_content__image_and_teaser'] = [
    'variables' => [
      'image' => NULL,
      'image_alt' => NULL,
      'teaser' => NULL,
    ],
  ];

  // Content header (node's title and background image).
  $info['server_theme_content__hero_header'] = [
    'variables' => [
      'title' => NULL,
      'background_image' => NULL,
      // The container type for the title. Either: wide, narrow, full.
      'title_container' => NULL,
    ],
  ];

  $info['server_theme_content__body'] = [
    'variables' => [
      'content' => NULL,
    ],
  ];

  // Button.
  $info['server_theme_button'] = [
    'variables' => [
      'label' => NULL,
      'id' => NULL,
      'onclick' => NULL,
      'target' => NULL,
      'url' => NULL,
      'color' => NULL,
      'icon' => NULL,
      'icon_only' => NULL,
      'custom_classes' => [],
    ],
  ];

  $info['server_theme_user_image'] = [
    'variables' => [
      'image' => NULL,
      'image_alt' => NULL,
      'initials' => NULL,
    ],
  ];

  $info['server_theme_person_card'] = [
    'variables' => [
      'image' => NULL,
      'image_alt' => NULL,
      'name' => NULL,
      'position' => NULL,
      'role' => NULL,
      'email' => NULL,
      'phone' => NULL,
      'custom_classes' => [],
    ],
  ];

  $info['server_theme_footer'] = [
    'variables' => [],
  ];

  $info['server_theme_page_title'] = [
    'variables' => [
      'title' => NULL,
    ],
  ];

  return $info;
}

/**
 * Implements hook_preprocess_page().
 */
function server_theme_preprocess_page(array &$variables) {
  $variables['page']['footer'] = ['#theme' => 'server_theme_footer'];
}

/**
 * Implements hook_preprocess_page_title().
 *
 * On node view pages, we'll take care of showing the page title (i.e. the
 * <h1> element).
 */
function server_theme_preprocess_page_title(array &$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node) {
    $variables['title'] = '';
  }
}

/**
 * Implements hook_theme_suggestions_page_title_alter().
 *
 * Use our own page title theme.
 */
function server_theme_theme_suggestions_page_title_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'server_theme_page_title';
}

/**
 * Implements hook_preprocess_node().
 *
 * Display OG subscribe message.
 */
function server_theme_preprocess_node(&$variables) {
  $node = $variables['node'];

  $group_manager = \Drupal::service('og.group_type_manager');
  $membership_manager = \Drupal::service('og.membership_manager');
  $user = \Drupal::currentUser();

  $subscribe_condition = !$user->isAnonymous() &&
    $group_manager->isGroup('node', $node->bundle()) &&
    !$membership_manager->isMember($node, $user->id());

  if ($subscribe_condition) {
    $url = Url::fromRoute('og.subscribe',
      [
        'entity_type_id' => 'node',
        'group' => $node->id(),
      ],
      [
        'attributes' => ['class' => ['og-subscribe']]
      ]);
    $subscribe_link = Link::fromTextAndUrl(t('here'), $url);
    $variables['og_subscribe_message'] = t('Hi @user_name, click %link if you would like to subscribe to this
      group called "@group_name"',
      [
        '@user_name' => $user->getDisplayName(),
        '%link' => $subscribe_link->toString(),
        '@group_name' => $node->label(),
      ]);
  }
}
